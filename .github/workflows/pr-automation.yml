# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: PR Automation
on:
  workflow_call:
    inputs:
      default-label:
        description: The default label to add to PR
        required: false
        default: 'maintenance'
        type: string

# allow single build per branch or PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.number }}
  cancel-in-progress: false

# clare all permissions for GITHUB_TOKEN
permissions: {}

jobs:
  # dump GitHub context only when the workflow is re runed,
  # can help investigate problems
  dump-github-context:
    runs-on: ubuntu-latest
    if: github.run_attempt > 1

    steps:
      - run: echo "ok"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        shell: bash

  # check PR milestone - if not set - update with current opened milestone
  milestone:
    permissions:
      issues: write
      pull-requests: write

    if: >
      github.event.action == 'closed' && 
      github.event.pull_request.merged  && 
      !github.event.pull_request.milestone &&
      !contains(github.event.pull_request.labels.*.name, 'skip-changelog')
    runs-on: ubuntu-latest
    steps:
      - name: Update milestone
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(milestones);
            const branch = context.payload.pull_request.base.ref
            
            if (milestones.data.length == 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '@' + context.payload.pull_request.merged_by.login +
                ' There are no open milestones ... please create one'
              });
              throw new Error('There are no open milestones ... please create one')
            }

            var milestone;
            if (milestones.data.length > 1) {
              milestone = milestones.data.find(({description}) => description?.includes('branch: ' + branch));
              if (!milestone) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: '@' + context.payload.pull_request.merged_by.login +
                  ' There are more then oen open milestones ... please add a "branch: ' + branch + '" to description in one milestone'
                });
                throw new Error('There are more then oen open milestones ... please add a "branch: ' + branch + '" to description in one milestone');
              }
            } else {
              milestone = milestones.data[0];
            }
            
            console.log('Set milestone to: ' + milestone.title);
            
            const result = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              milestone: milestone.number
            });
            
            console.log(result);

  # check PR milestone - remove for not merged PR or with skip-changelog label
  milestone-rm:
    permissions:
      issues: write
      pull-requests: write

    if: >
      github.event.action == 'closed' && 
      (!github.event.pull_request.merged || contains(github.event.pull_request.labels.*.name, 'skip-changelog')) && 
      github.event.pull_request.milestone
    runs-on: ubuntu-latest
    steps:
      - name: Remove milestone
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |

            const result = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              milestone: null
            });
            
            console.log(result);

  # check PR labels - if is empty list add one default
  labels:
    permissions:
      issues: write
      pull-requests: write

    if: >
      github.event.action == 'closed' && 
      github.event.pull_request.merged && 
      toJSON(github.event.pull_request.labels) == '[]'
    runs-on: ubuntu-latest
    steps:

      - name: Set default label
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          DEFAULT_LABEL: ${{ inputs.default-label }}
        with:
          script: |
            
            console.log(context.issue.labels);
            
            if ( !context.issue.labels?.length ) {
            
              if ( !process.env.DEFAULT_LABEL ) {
                throw new ERROR('There are no labels on PR and default label is not set');
              }
            
              const result = await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [ process.env.DEFAULT_LABEL ]
              });
            
              console.log(result);
            }

  # check PR assignee - if no one is assigned, assign to person who merge PR
  assignees:
    permissions:
      issues: write
      pull-requests: write

    if: >
      github.event.action == 'closed' && 
      github.event.pull_request.merged && 
      toJSON(github.event.pull_request.assignees) == '[]'
    runs-on: ubuntu-latest
    steps:

      - name: Assign PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            
            console.log(context.payload.pull_request);
            console.log(context.payload.pull_request.merged_by);
                        
            const result = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: [ context.payload.pull_request.merged_by.login ]
            });
          
            console.log(result);
